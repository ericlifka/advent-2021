(import input.02)


(function get-input ()
  (let (input (trim input.02/input)
        lines (split "\n" input))
    (map (fn (line)
           (let (parts (split " " (trim line))
                 direction (get parts 0)
                 amount (to-number (get parts 1))
                 instruction {:direction (if (== direction "forward")
                                           :horizontal
                                           :vertical)
                              :quantity (if (== direction "up")
                                          (* -1 amount)
                                          amount)})
             instruction))
      lines)))

(function print-results (part position)
  (print "\n" part
         "\n  Position: " position 
         "\n  combined: " (* (get position :vertical)
                           (get position :horizontal))))

; Part 1
(print-results "part 1"
  (reduce 
    (fn (position instruction)
      (let (direction (get instruction :direction)
            quantity (get instruction :quantity)
            current (get position direction))
        (set position direction 
          (+ quantity current))))

    {:vertical   0
     :horizontal 0}

    (get-input)))


; Part 2
(print-results "part 2"
  (reduce
    (fn (position instruction)
      (let (direction  (get instruction :direction)
            quantity   (get instruction :quantity)
            
            vertical   (get position :vertical)
            horizontal (get position :horizontal)
            aim        (get position :aim))
        (if (== direction :vertical)
          ;; Vertical Movement
          {:vertical   vertical
           :horizontal horizontal
           :aim        (+ aim quantity)}
          ;; Horizontal Movement
          {:vertical   (+ (* aim quantity)
                          vertical)
           :horizontal (+ quantity 
                          horizontal)
           :aim        aim})))

    {:vertical   0
     :horizontal 0 
     :aim        0}

    (get-input)))
